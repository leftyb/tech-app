# EC2NodeClass for Karpenter
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  amiSelectorTerms:
    - alias: bottlerocket@latest
  role: eks-tech-app
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: eks-tech-app
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: eks-tech-app
  tags:
    karpenter.sh/discovery: eks-tech-app
---
# NodePool for Karpenter (Allowing only On-Demand instances)
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      requirements:
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["c", "m", "r"]  # Categories you want (compute, memory, etc.)
        - key: karpenter.k8s.aws/instance-size
          operator: In
          values: ["nano", "micro", "small", "medium"]  # Instance sizes you want
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]  # Only On-Demand Instances
        - key: kubernetes.io/arch  # Enforce only AMD64 nodes
          operator: In
          values: ["amd64"]  # Exclude arm64
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default  # Reference to the EC2NodeClass
  limits:
    cpu: "2"  # Set maximum CPU limit to 2 vCPUs
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 5s
    budgets:
      - nodes: "100%"